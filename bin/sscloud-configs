#!/opt/sscloud/bin/python

import logging
import netaddr
import netifaces
import os
import yaml

from getpass import getpass
from jinja2 import Environment, FileSystemLoader
from platform import uname
from shutil import move
from socket import getfqdn
from subprocess import check_output

logger = logging.getLogger(__name__)

class configs:
	def __init__(self, config='/etc/sscloud/config.yml'):
		self.config = config
		self._admin = None

	def genconfig_full(self, user, password, **kwargs):
		"""
		Genarete full SSCloud configuratoin.
		Arguments is same with genconfig()
		"""
		if self.genconfig(user, password, **kwargs):
			# Generate a simple configuration at first.
			# Then, get settings from simple configuration.
			with open(self.config, 'r') as f:
				settings = yaml.load(f)

			# Get template
			dname = os.path.dirname(__file__) + '/../templates/sscloud'
			env = Environment(loader=FileSystemLoader(os.path.abspath(dname)))
			template = env.get_template('other.yml')

			# Generate new settings
			other = yaml.load(template.render(settings=settings))
			output = dict((settings.items() + other.items()))

			# Save new settings to configuration
			with open(self.config, 'w') as f:
				yaml.dump(output, f, default_flow_style=False)
			return True

		return False

	def genconfig(self, user, password, **kwargs):
		"""
		Genarate SSCloud configuration

		Args:
			- user: user name of administrator
			- password: password of administrator

		Kwargs:
			- tenant: tenant name of administrator
			- email: email of administrator
			- token: admin token for Keystone
			- controller: controller node of SSCloud
			- domainname: public domainname for dashboard
			- https: enable(True) of disable(False) https protocol for dashboard
			- cacrt: path of ca certificate
			- cakey: path of ca public key
		"""

		#Process args
		settings = dict()

		# Admin account information
		admin = dict()
		admin['user'] = str(user)
		admin['password'] = str(password)
		admin['tenant'] = str(kwargs.setdefault('tenant', 'admin'))
		admin['token'] = str(kwargs.setdefault('token', check_output('openssl rand -hex 10', shell=True))).split('\n')[0]
		
		# SSCloud settings
		sscloud = dict()
		sscloud['controller'] = str(kwargs.setdefault('controller', uname()[1]))
		#sscloud['compute'] = list().append(sscloud['controller'])
		sscloud['compute'] = [sscloud['controller']]
		sscloud['region'] = 'regionOne'

		# SSCloud dashboard
		dashboard = dict()
		dashboard['domain'] = str(kwargs.setdefault('domainname', getfqdn()))
		dashboard['https'] = dict()
		dashboard['https']['enable'] = bool(kwargs.setdefault('https', False))
		if dashboard['https']['enable']:
			for ca in ['crt', 'key']:
				key = 'ca' + ca
				dashboard['https'][ca] = str(kwargs.setdefault(key, '/etc/sscloud/ssl/sscloud.%s' % (ca)))
				if not os.path.isfile(dashboard['https'][ca]):
					logger.warning('Missing ssl file: %s, please put file in correct path before you start deployment.' % dashboard['https'][ca])
		sscloud['horizon'] = dashboard

		# Network settings of controller node (Neutron server)
		try:
			gw, iface = netifaces.gateways()['default'][netifaces.AF_INET]
			network = {'openvswitch': {'br-ex': iface}, iface: [] }
			for _ in netifaces.ifaddresses(iface)[netifaces.AF_INET]:
				ipset = [_['addr'] , _['netmask']]
				ip_network = netaddr.IPNetwork('{ip}/{netmask}'.format(ip=_['addr'], netmask=_['netmask'])).network
				gw_network = netaddr.IPNetwork('{ip}/{netmask}'.format(ip=gw, netmask=_['netmask'])).network
				if ip_network == gw_network:
					ipset.append(gw)
				network[iface].append(ipset)
			settings['network_topology'] = { sscloud['controller']: network }
				
		except Exception, error:
			logger.error('Unknown error: %s', str(error))

		# Other
		admin['email'] = str(kwargs.setdefault('email', '{0}@{1}'.format(str(user), dashboard['domain'])))
		sscloud['admin'] = admin
		settings['openstack'] = sscloud

		# Save configuration
		base_dir = '/'.join(self.config.split('/')[:-1])
		if not os.path.exists(base_dir):
			os.makedirs(base_dir)

		if os.path.isfile(self.config):
			try:
				backup_orig = self.config + '.orig'
				move(self.config, backup_orig)
				logger.warning('%s is already exist. Move file to %s',self.config, backup_orig)
			except Exception, err:
				logger.error('Unknown error: %s', str(err))

		with open(self.config, 'w') as f:
			yaml.dump(settings, f, default_flow_style=False)

		return True

if __name__ == "__main__":
	import argparse

	# Set console logger
	try:
		import coloredlogs
		coloredlogs.install(level=logging.DEBUG)
	except:
		formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
		root = logging.getLogger()
		root.setLevel(logging.DEBUG)
		ch = logging.StreamHandler()
		ch.setLevel(logging.DEBUG)
		ch.setFormatter(formatter)
		root.addHandler(ch)

	# Set args parser
	parser = argparse.ArgumentParser(
		description = 'SSCloud configuration management'
	)

	parser.add_argument('-c', '--config', default='/etc/sscloud/config.yml', help='the path of SSCloud configuration.')
	parser.add_argument('--full-config', action="store_true", help='genrate full settings configuration')
	parser.add_argument('-u', '--user', default='admin', help='user name of SSCloud administrator.')
	parser.add_argument('-p', '--password', help='password for SSCloud administrator.')
	parser.add_argument('-t', '--tenant', default='admin', help='tenant name for SSCloud administrator.')
	parser.add_argument('--token', help="admin token for SSCloud keystone.")
	parser.add_argument('--email', help="email address of SSCloud administrator")
	parser.add_argument('--controller', help='hostname of controller node.')
	parser.add_argument('-d', '--domainname', help='web domain name for SSCloud dashboard.')
	parser.add_argument('--https', action="store_true", help="enable HTTPS portocol for SSCloud dashboard.")
	parser.add_argument('--cacrt', help="path of ssl crt file for SSCloud dashboard")
	parser.add_argument('--cakey', help="path of ssl key file for SSCloud dashboard")

	args = parser.parse_args()

	# Process args
	if not args.password:
		args.password = getpass()

	if args.https:
		print "Enable https on SSCloud dashboard."
		args.cacrt = args.cacrt if args.cacrt else raw_input('File path of ca certificate: ')
		args.cakey = args.cakey if args.cakey else raw_input('File path of ca public key: ')

	# Remove empty setting from args
	kwargs = dict( (k,v) for k, v in vars(args).iteritems() if v)

	# Generate SSCloud configuration
	obj = configs(kwargs.pop('config'))
	if args.full_config:
		kwargs.pop('full_config')
		print 'Finished' if obj.genconfig_full(kwargs.pop('user'), kwargs.pop('password'), **kwargs) else 'Error!'
	else:
		print 'Finished' if obj.genconfig(kwargs.pop('user'), kwargs.pop('password'), **kwargs) else 'Error!'

